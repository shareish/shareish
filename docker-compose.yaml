# version: "3.9"
   
# services:
#   db:
#     image: postgres
#     volumes:
#       - ./data/db:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=postgres
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=postgres

#   postgis:
#     image: postgis/postgis:14-3.2
#     environment:
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=postgres
  
#   web:
#     build: .
#     command: python manage.py runserver 0.0.0.0:8000
#     volumes:
#       - .:/code
#     ports:
#       - ":7999"
#     environment:
#       - POSTGRES_NAME=postgres
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=postgres
#     depends_on:
#       - db


# docker-compose build
version: '3.9'
volumes:
  dbbackups:
  postgis-data:

services:

  db:
    image: kartoza/postgis:14-3.2
    volumes:
      - postgis-data:/var/lib/postgresql
      - dbbackups:/backups
    environment:
      # If you need to create multiple database you can add coma separated databases eg gis,data
      - POSTGRES_DB=postgis
      - POSTGRES_USER=postgis
      - POSTGRES_PASS=postgis
      - ALLOW_IP_RANGE=0.0.0.0/0
      # Add extensions you need to be enabled by default in the DB. Default are the five specified below
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
    ports:
      - "25432:5432"
    restart: on-failure
    healthcheck:
      test: "exit 0"

  dbbackups:
    image: kartoza/pg-backup:14-3.2
    hostname: pg-backups
    volumes:
      - dbbackups:/backups
    environment:
      - DUMPPREFIX=PG_db
      - POSTGRES_USER=docker
      - POSTGRES_PASS=docker
      - POSTGRES_PORT=5432
      - POSTGRES_HOST=db
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy

  web:
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/code
    ports:
      - ":7999"
    environment:
      - POSTGRES_NAME=postgis
      - POSTGRES_USER=postgis
      - POSTGRES_PASSWORD=postgis
    depends_on:
      - db
