"""
Django settings for Shareish mapsite project.

Generated by 'django-admin startproject' using Django 3.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import datetime
from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# use e.g. https://django-secret-key-generator.netlify.app/ to generate a secret key
# https://stackoverflow.com/questions/15209978/where-to-store-secret-keys-django  
SECRET_KEY = 'XXXXXXXXXXXXXXX'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

DEV = False
DEV_DOMAIN = "localhost:8081"
DEV_URL = "http://" + DEV_DOMAIN
DEV_API_URL = "http://localhost:8000"

PROD_DOMAIN = "shareish.org"
PROD_URL = "https://" + PROD_DOMAIN
PROD_API_URL = PROD_URL

APP_DOMAIN = DEV_DOMAIN if DEV else PROD_DOMAIN
APP_URL = DEV_URL if DEV else PROD_URL
API_URL = DEV_API_URL if DEV else PROD_API_URL

ALLOWED_HOSTS = ['web', APP_DOMAIN.split(":")[0]]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'rest_framework',
    'rest_framework.authtoken',
    'mail_templated',
    'corsheaders',
    'djoser',
    'channels',
    'mymap.apps.MymapConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mapsite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],
        },
    },
]

# /!\ use Redis channel layer in production
WSGI_APPLICATION = 'mapsite.wsgi.application'
ASGI_APPLICATION = 'mapsite.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer'
    }
}

# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels_redis.core.RedisChannelLayer",
#         "CONFIG": {
#             "hosts": [("127.0.0.1", 6379)],
#         },
#     },
# }


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'HOST': "db",
        'NAME': 'postgres',
        'PASSWORD': "postgres",
        'PORT': "5432",
        'USER': "postgres",
    }
}

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'XXXXXXXXXXXXXXX'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'noreply@shareish.org'
EMAIL_HOST_PASSWORD = 'XXXXXXXXXXXXXXX'
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
EMAIL_USE_TLS = True

MEDIA_ROOT = BASE_DIR / "mediafiles"
MEDIA_URL = '/media/'

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"class": "logging.StreamHandler"},
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
        },
    }
}

LOGIN_URL = 'login/'
LOGIN_REDIRECT_URL = 'index/'
LOGOUT_REDIRECT_URL = 'login/'

AUTH_USER_MODEL = 'mymap.User'

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Brussels'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/static'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

CORS_ALLOW_ALL_ORIGINS = DEV

CORS_ALLOWED_ORIGINS = [
    "http://ui",
    "http://localhost",
    APP_URL
]

DOMAIN = APP_DOMAIN
SITE_NAME = 'Shareish'

DJOSER = {
    'LOGIN_FIELD': 'email',
    'PASSWORD_RESET_CONFIRM_URL': 'reset-password/confirm/{uid}/{token}',
    'SEND_ACTIVATION_EMAIL': True,  # also send if email has changed
    'SEND_CONFIRMATION_EMAIL': True,  # registration or activation
    'PASSWORD_CHANGED_EMAIL_CONFIRMATION': True,
    'ACTIVATION_URL': 'activate/{uid}/{token}',

    'SERIALIZERS': {
        'user': 'mymap.serializers.UserSerializer',
        'current_user': 'mymap.serializers.UserSerializer',
        'user_create': 'mymap.serializers.UserRegistrationSerializer',
        'user_update': 'mymap.serializers.UserSerializer',
    },
}

INTERVAL_ACCOUNT_DELETION = datetime.timedelta(days=30)
